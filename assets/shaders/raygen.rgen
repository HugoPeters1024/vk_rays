#version 460
#extension GL_EXT_buffer_reference2 : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_nonuniform_qualifier : enable

#include "rand.glsl"
#include "common.glsl"


layout(set=0, binding=0, rgba32f) uniform image2D                  render_target;
layout(set=0, binding=1)          uniform accelerationStructureEXT topLevelAS;

layout(push_constant, std430) uniform Registers {
  UniformData uniforms;
};

layout(location = 0) rayPayloadEXT HitPayload payload;

uint getSeed() {
    uint r = wang_hash(gl_LaunchIDEXT.x + gl_LaunchSizeEXT.x * gl_LaunchIDEXT.y);
    if (uniforms.should_clear == 0) {
      r += uniforms.entropy;
    }
    return r;
}

void main() {
  uint seed = getSeed();
  const vec2 pixel_center = vec2(gl_LaunchIDEXT.xy) + vec2(randf(seed), randf(seed));
  const vec2 inUV = pixel_center / vec2(gl_LaunchSizeEXT.xy);
  vec2 d = inUV * 2.0 - 1.0;

  vec3 start_origin = (uniforms.inverse_view * vec4(0,0,0,1)).xyz;
  vec3 target = (uniforms.inverse_proj * vec4(d.x, d.y, 1, 1)).xyz;
  vec3 start_direction = (uniforms.inverse_view * vec4(normalize(target), 0)).xyz;


  float tmin = 0.0001;
  float tmax = 100.0;

  vec3 accum = vec3(0.0);
  const uint MAX_SAMPLES = 8;

  for(uint s = 0; s<MAX_SAMPLES; s++) {
    vec3 mask = vec3(1.0);
    vec3 origin = start_origin;
    vec3 direction = start_direction;

    for(uint bounce=0; bounce<16; bounce++) {
      traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xFF, 0, 0, 0, origin, tmin, direction, tmax, 0);

      accum += mask * payload.emission;
      if (payload.t == 0.0) {
        break;
      }

      if (max3(payload.color) == 0.0) {
        origin = origin + payload.t * direction;
        continue;
      }

      // russian roullete
      const float pRussian = clamp(max3(payload.color), 0.1, 0.9);
      if (randf(seed) > pRussian) {
        break;
      }
      mask /= pRussian;


      mask *= payload.color;

      bool inside = dot(direction, -payload.normal) < 0;
      if (inside) {
        payload.normal = -payload.normal;
        payload.surface_normal = -payload.surface_normal;
      }

      const vec3 sample_dir = alignToNormalZUP(SampleHemisphereCosine(seed), payload.normal);
      origin = origin + payload.t * direction;
      if (randf(seed) < payload.transmission) {
        // calculate the eta based on whether we are inside
        const float n1 = inside ? payload.refract_index : 1.0f;
        const float n2 = inside ? 1.0f : payload.refract_index;
        const float eta = n1 / n2;

        const float costi = dot(payload.normal, -direction);
        const float k = 1 - (eta* eta) * (1 - costi * costi);


        float pReflect;
        if (k < 0) {
            // Total internal reflection
            pReflect = 1;
        } else {
            // fresnell equation for reflection contribution
            const float sinti = sqrt(max(0.0f, 1.0f - costi - costi));
            const float costt = sqrt(1.0f - eta * eta * sinti * sinti);
            const float spol = (n1 * costi - n2 * costt) / (n1 * costi + n2 * costt);
            const float ppol = (n1 * costt - n2 * costi) / (n1 * costt + n2 * costi);
            pReflect = 0.5f * (spol * spol + ppol * ppol);
        }

        vec3 refract_dir;
        if (randf(seed) < pReflect) {
            refract_dir = reflect(direction, payload.normal);
        } else {
            refract_dir = normalize(eta * direction + payload.normal * (eta * costi - sqrt(k)));
        }

        direction = mix(refract_dir, sample_dir, payload.roughness);
      } else {
        // reflection
        vec3 reflect_dir = reflect(direction, payload.normal);
        direction = mix(reflect_dir, sample_dir, payload.roughness);
      }

      if (dot(direction, payload.surface_normal) < 0) {
        direction = reflect(direction, payload.surface_normal);
      }

      if (dot(direction, payload.surface_normal) < 0) {
        accum += vec3(10000);
      }
    }
  }

  vec4 old_image = uniforms.should_clear != 0 ? vec4(0) : imageLoad(render_target, ivec2(gl_LaunchIDEXT.xy));
  imageStore(render_target, ivec2(gl_LaunchIDEXT.xy), old_image + vec4(accum/float(MAX_SAMPLES), 1.0));
}
