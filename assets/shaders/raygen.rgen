#version 460
#extension GL_EXT_buffer_reference2 : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_nonuniform_qualifier : enable

#include "rand.glsl"
#include "common.glsl"


layout(set=0, binding=0, rgba32f) uniform image2D                  render_target;
layout(set=0, binding=1)          uniform accelerationStructureEXT topLevelAS;

layout(push_constant, std430) uniform Registers {
  UniformData un;
  VertexData  vd;
  IndexData   id;
} regs;

layout(location = 0) rayPayloadEXT HitPayload payload;

uint getSeed() {
    return wang_hash(gl_LaunchIDEXT.x + gl_LaunchSizeEXT.x * gl_LaunchIDEXT.y) * regs.un.entropy;
}

void main() {
  g_seed = getSeed();
  const vec2 pixel_center = vec2(gl_LaunchIDEXT.xy) + vec2(randf(), randf());
  const vec2 inUV = pixel_center / vec2(gl_LaunchSizeEXT.xy);
  vec2 d = inUV * 2.0 - 1.0;

  vec3 start_origin = (regs.un.inverse_view * vec4(0,0,0,1)).xyz;
  vec3 target = (regs.un.inverse_proj * vec4(d.x, d.y, 1, 1)).xyz;
  vec3 start_direction = (regs.un.inverse_view * vec4(normalize(target), 0)).xyz;


  float tmin = 0.001;
  float tmax = 100.0;

  vec3 accum = vec3(0.0);

  vec3 origin = start_origin;
  vec3 direction = start_direction;
  vec3 mask = vec3(1.0);

  traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xFF, 0, 0, 0, origin, tmin, direction, tmax, 0);

  if (payload.t > 0) {
    accum += abs(payload.normal);
  }

  vec4 old_image = regs.un.entropy == 666 ? vec4(0) : imageLoad(render_target, ivec2(gl_LaunchIDEXT.xy));
  imageStore(render_target, ivec2(gl_LaunchIDEXT.xy), old_image + vec4(accum, 1.0));
}
