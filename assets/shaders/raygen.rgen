#version 460
#extension GL_EXT_buffer_reference2 : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_nonuniform_qualifier : enable

#include "rand.glsl"
#include "common.glsl"
#include "brdf.glsl"


layout(set=0, binding=0, rgba32f) uniform image2D                  render_target;
layout(set=0, binding=1)          uniform accelerationStructureEXT topLevelAS;

layout(push_constant, std430) uniform Registers {
  UniformData uniforms;
  QueryData queries;
};

layout(location = 0) rayPayloadEXT HitPayload payload;

uint getSeed() {
    uint entropy = 0;
    if (uniforms.should_clear == 0) {
      entropy = uniforms.entropy;
    }
    return initRandom(gl_LaunchIDEXT.xy, gl_LaunchIDEXT.xy, entropy);
}

bool isInsideHexagon(vec2 pos)
{
    const float q2x = abs(pos.x);         // transform the test point locally and to quadrant 2
    const float q2y = abs(pos.y);         // transform the test point locally and to quadrant 2
    if (q2x > 0.5 || q2y > 1) return false;           // bounding test (since q2 is in quadrant 2 only 2 tests are needed)
    return 1 - q2x - q2y >= 0;   // finally the dot product can be reduced to this due to the hexagon symmetry
}

vec2 sampleHexagon() {
  while(true) {
    float x = randf() * 2.0 - 1.0;
    float y = randf() * 2.0 - 1.0;
    if (isInsideHexagon(vec2(x,y))) {
      return vec2(x,y);
    }
  }
}

void main() {
  g_seed = getSeed();
  const float aspect_ratio = float(gl_LaunchSizeEXT.x) / float(gl_LaunchSizeEXT.y);
  const vec2 pixel_center = vec2(gl_LaunchIDEXT.xy) + vec2(randf(), randf());
  const vec2 inUV = pixel_center / vec2(gl_LaunchSizeEXT.xy);
  vec2 d = inUV * 2.0 - 1.0;

  float focalDistance = queries.focal_distance;

  const float aperture = 0.005f;
  const float offsetR = sqrt(randf());
  const float offsetA = randf() * 2.0f * PI;
  const vec2 focalOffset = aperture * sampleHexagon() * vec2(aspect_ratio, 1.0);

  const float tmin = 0.0001;
  const float tmax = 100.0;

  vec3 start_origin = (uniforms.inverse_view * vec4(0,0,0,1)).xyz;
  vec3 target = (uniforms.inverse_proj * vec4(d, 1, 1)).xyz;
  vec3 start_direction = (uniforms.inverse_view * vec4(normalize(target), 0)).xyz;

  if (uniforms.mouse_x != 0 && 
      uniforms.mouse_y != 0 && 
      uniforms.mouse_x == gl_LaunchIDEXT.x &&
      uniforms.mouse_y == gl_LaunchIDEXT.y)
  {
    traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xFF, 0, 0, 0, start_origin, tmin, start_direction, tmax, 0);
    if (payload.t != 0.0) {
      queries.focal_distance = payload.t;
    }
  }

  vec3 focal_point = start_origin + focalDistance * start_direction;
  start_origin = (uniforms.inverse_view * vec4(focalOffset,0,1)).xyz;
  start_direction = normalize(focal_point - start_origin);



  vec3 accum = vec3(0.0);
  uint MAX_SAMPLES = 1;
  if (uniforms.should_clear == 0) {
    MAX_SAMPLES = 4;
  }

  for(uint s = 0; s<MAX_SAMPLES; s++) {
    vec3 mask = vec3(1.0);
    vec3 origin = start_origin;
    vec3 direction = start_direction;

    for(uint bounce=0; bounce<256; bounce++) {
      traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xFF, 0, 0, 0, origin, tmin, direction, tmax, 0);

      accum += mask * payload.emission;
      if (payload.t == 0.0) {
        break;
      }

      origin = origin + payload.t * direction;
      if (randf() < 1-payload.color.a || max3(payload.color.rgb) == 0.0) {
        continue;
      }

      // russian roullete
      const float pRussian = clamp(max3(payload.color.rgb), 0.1, 0.9);
      if (randf() > pRussian) {
        break;
      }
      mask /= pRussian;

      if (randf() < payload.transmission) {
        // calculate the eta based on whether we are inside
        const float n1 = payload.inside ? payload.refract_index : 1.0f;
        const float n2 = payload.inside ? 1.0f : payload.refract_index;
        const float eta = n1 / n2;

        const float costi = dot(payload.normal, -direction);
        const float k = 1 - (eta* eta) * (1 - costi * costi);


        float pReflect;
        if (k < 0) {
            // Total internal reflection
            pReflect = 1;
        } else {
            // fresnell equation for reflection contribution
            const float sinti = sqrt(max(0.0f, 1.0f - costi - costi));
            const float costt = sqrt(1.0f - eta * eta * sinti * sinti);
            const float spol = (n1 * costi - n2 * costt) / (n1 * costi + n2 * costt);
            const float ppol = (n1 * costt - n2 * costi) / (n1 * costt + n2 * costi);
            pReflect = 0.5f * (spol * spol + ppol * ppol);
        }

        vec3 refract_dir;
        if (randf() < pReflect) {
            refract_dir = reflect(direction, payload.normal);
        } else {
            origin += 0.002 * direction;
            refract_dir = normalize(eta * direction + payload.normal * (eta * costi - sqrt(k)));
        }

        vec3 sample_dir = alignToNormalZUP(CosineSampleHemisphere(randf(), randf()), payload.normal);
        direction = mix(refract_dir, sample_dir, payload.roughness);
        if (payload.inside) {
          mask *= exp(-payload.t * payload.absorption);
        }
      } else {

        Material mat;
        mat.albedo = payload.color.rgb;
        mat.metallic = payload.metallic;
        mat.roughness = payload.roughness;
        mat.emissive = vec3(0);

        vec3 outDir;
        vec4 brdf = sampleDisneyBRDF(-direction, payload.normal, mat, outDir);

        if (brdf.a > 0.0) {
          mask *= brdf.rgb / brdf.a;
        }

        direction = outDir;

        // reflection
        vec3 reflect_dir = reflect(direction, payload.normal);
        if (dot(direction, payload.surface_normal) < 0) {
          break;
        }
      }
    }
  }

  vec4 old_image = uniforms.should_clear != 0 ? vec4(0) : imageLoad(render_target, ivec2(gl_LaunchIDEXT.xy));
  imageStore(render_target, ivec2(gl_LaunchIDEXT.xy), old_image + vec4(accum/float(MAX_SAMPLES), 1.0));
}
